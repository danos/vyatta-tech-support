#!/bin/bash
# Copyright (c) 2019-2020, AT&T Intellectual Property. All rights reserved.
# Copyright (c) 2014-2016 by Brocade Communications Systems, Inc.
# All rights reserved.
#
# SPDX-License-Identifier: LGPL-2.1-only

# by default send to stdout
OUT=1
FLAG=0
REMOTE=0
ENCRYPT=0
DEFAULT_PATH=/config/support
DEFAULT_GROUP=users
TECH_SUPPORT_SCRIPTS_DIR=/opt/vyatta/share/vyatta-op/functions/tech-support.d
TECH_SUPPORT_BRIEF_SCRIPTS_DIR=/opt/vyatta/share/vyatta-op/functions/tech-support-brief.d
VRF_MGR_PACKAGE=vrf-manager

if [ -n "$VYATTA_TECH_SUPPORT_FILE_PASS" ]; then
	ENCRYPT="1"
	FILEPASS="$VYATTA_TECH_SUPPORT_FILE_PASS"
	unset VYATTA_TECH_SUPPORT_FILE_PASS
fi

COPY_USER="$VYATTA_TECH_SUPPORT_COPY_USER"
unset VYATTA_TECH_SUPPORT_COPY_USER

COPY_PASS="$VYATTA_TECH_SUPPORT_COPY_PASS"
unset VYATTA_TECH_SUPPORT_COPY_PASS

# The member of this array is cleaned up at exit.
declare -a TS_CLEANP_DIRS

ts_push_cleanup_dir() {
	TS_CLEANUP_DIRS+=("$@")
}

ts_cleanup() {
	for d in "${TS_CLEANUP_DIRS[@]}"; do
		rm -rf "$d"
	done
}

trap 'ts_cleanup' EXIT

function header {
		echo
		echo ----------------
		echo "$*"
		echo ----------------
}

function header2 {
		echo
		echo --------------------------------------
		echo "$*"
		echo --------------------------------------
}

function do_cmd_header {
		echo
		echo "CLI: $*"
		echo
}

function do_cmd {
		do_cmd_header "$*"
		"$@"
}

function package_exists() {
    dpkg -s "$1" &> /dev/null 
}

if package_exists $VRF_MGR_PACKAGE; then
    DEFAULT_VRF_NAME="- Routing Instance: default"
else
    DEFAULT_VRF_NAME=""    
fi

function package_version() {
    dpkg-query -f='${Version}' -W "$1"
}

do_rotate ()
{
	local limit=$1
	local match="$2"

	local count=$(ls -t "$DEFAULT_PATH/"$match 2>/dev/null |wc -l)
	if (( count >= $limit )); then
		local dfile=$(ls -t "$DEFAULT_PATH/"$match 2>/dev/null |tail -1)
		rm -f "$dfile" >&/dev/null \
			&& echo "Removed old tech-support output file '$dfile'"
	fi
}

function time_out_sec ()
{
	do_cmd_header "$2"
	timeout_sec=$1
 	/usr/bin/timeout -sKILL "$timeout_sec" /bin/vcli -c "$2"
	if (( $? == 137 )) ; then
		echo "Command \"$2\" timed out by $1."
	fi
}

function time_out ()
{
	time_out_sec 15s "$1"
}

function check_md5sum ()
{
	local pkg="$1"
	local file="$2"

	[ -f "$file" ] || return 0

	debsums -c -e "$pkg" | grep -q "$file"

	return $(( ! $? ))
}

function encrypt_file ()
{
	local in_file="$1"
	local passphrase="$2"
	local out_file="$3"

	echo "$passphrase" | gpg -q -o "$out_file" -c --passphrase-fd 0 		 \
						 --homedir "$VYATTA_TECH_SUPPORT_SCRATCH_DIR/.gnupg" \
						 --cipher-algo AES256 --batch "$in_file" &> /dev/null
}

function encrypt_stdin()
{
	local passphrase="$1"

	gpg -q -c --passphrase-fd 3 		 \
		 --homedir "$VYATTA_TECH_SUPPORT_SCRATCH_DIR/.gnupg" \
		 --cipher-algo AES256 --batch 2>/dev/null 3<<<"$passphrase"
}

function remote_copy() {
	local file="$1"
	local url="$2"

	echo "Saving $(realpath "$file") to $url";

	# Silent, except errors.
	curl_cmd="vyatta-curl-wrapper -Ss --upload-file"

	if [ -n "$COPY_USER" ]; then
		VYATTA_CURL_USER="$COPY_USER" VYATTA_CURL_PASS="$COPY_PASS" $curl_cmd "$file" "$url"
	else
		$curl_cmd "$file" "$url"
	fi

	rc=$?
	if [ $rc -ne 0 ]; then
		echo "Failed, is your url correct?"
	else
		echo "Success"
	fi
	return $rc
}

create_scratch_dir() {
	[ -z "$VYATTA_TECH_SUPPORT_SCRATCH_DIR" ] || return 0

	local scratch_dir

	if ! scratch_dir="$(mktemp -d)"; then
		msg="Failed to create scratch directory,"
		if [[ $ENCRYPT -eq 1 ]]; then
			echo "${msg} unable to generate encrypted output" >&2
			return 1
		else
			echo "${msg} output may be limited" >&2
		fi
	else
		ts_push_cleanup_dir "$scratch_dir"
		export VYATTA_TECH_SUPPORT_SCRATCH_DIR="$scratch_dir"
	fi
	return 0
}

ts_err() {
	local code="$1"
	shift
	echo "$@" >&2
	exit "$code"
}

# called as
# ts_target_name "path" "suffix"
# creates <dir>/<name>?<host>.tech-support[-suffix].<time>
# shellcheck disable=SC2155
ts_target_name() {
	local h=$(hostname)
	local t=$(date +%F-%H%M%S)
	local desc=tech-support${2:+-${2}}
	local o="${h}.${desc}.${t}"

	if [[ -z ${1} ]] || is_remote_dest "${1}"; then
		# Empty or URL
		mkdir -p ${DEFAULT_PATH} >&/dev/null
		echo "${DEFAULT_PATH}/${o}"
	elif [[ ${1} =~ ^/.+ ]]; then
		# Absolute Path
		echo "${1}.${o}"
	elif [[ ${1} =~ ^[^/]+$ ]]; then
		# Filename
		mkdir -p ${DEFAULT_PATH} >&/dev/null
		echo "${DEFAULT_PATH}/${1}.${o}"
	else
		return 1
	fi
}

is_remote_dest() {
	[[ ${1} =~ ^(scp|ftp)://.* ]] || return 1
	return 0
}

ts_call_cmd() {
	local cmd="${1}"

	shift
	$cmd "$@"
}

#
# ts_save_file <dst> <temaplate> cmd [args...]
#
ts_save_file() {
	local dst="$1"
	local template="$2"
	shift 2

	local odir oname template

	odir=$(dirname "${template}")
	template=$(basename "${template}")

	[[ -d $odir ]] || ts_err 1 "Cannot save tech support: no such directory ${odir}"
	if [[ $odir -ef $DEFAULT_PATH ]]; then
		do_rotate 100 "*.tech-support.*"
		do_rotate 5 "*.tech-support-archive.*"
	fi

	local -i fd
	if ! exec {fd}>"$(mktemp --tmpdir="${odir}" -t "${template}")"; then
		ts_err 1 "Cannot create tech-support file ${oname}.\*.txt"
	fi

	# change permission on the /dev/fd - this protects against any mv done
	# after the templ files was created.
	chgrp "$DEFAULT_GROUP" /dev/fd/${fd} >& /dev/null
	chmod 'u=rw,g=r,o=' /dev/fd/${fd}
	fdname="$(realpath "/dev/fd/${fd}")" # use only in messages

	if is_remote_dest "${dst}";then
		REMOTE=1
	else
		echo "Saving tech support output to ${fdname}"
	fi

	ts_call_cmd "$@" >&"${fd}"

	if [[ $REMOTE -eq 1 ]]; then
		remote_copy "/dev/fd/${fd}" "$dst" || \
			ts_err 1 "Cannot copy ${fdname} to ${dst}"
	fi

	#close output file
	exec {fd}>&-
}
